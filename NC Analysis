import numpy as np
import matplotlib.pyplot as plt
from netCDF4 import Dataset
import cartopy.crs as ccrs
import cartopy.feature as cfeature

# Step 1: Function to read and plot yearly data from NetCDF file in subplots
def plot_yearly_precipitation_grid(netcdf_file, variable_name, lon_min, lon_max, lat_min, lat_max, rows, cols):
    """
    Plots yearly precipitation data from a NetCDF file for a specific region in a grid layout.
    
    Parameters:
    netcdf_file (str): Path to the NetCDF file.
    variable_name (str): The name of the variable to plot (e.g., 'precipitation').
    lon_min, lon_max, lat_min, lat_max (float): Longitude and latitude bounds for the region to plot.
    rows, cols (int): Number of rows and columns for the grid layout.
    """
    # Step 2: Open the NetCDF file
    dataset = Dataset(netcdf_file, 'r')
    
    # Extract latitude, longitude, and time variables
    lats = dataset.variables['lat'][:]
    lons = dataset.variables['lon'][:]
    times = dataset.variables['time'][:]
    
    # Convert time units (assuming units are days since a reference date)
    from netCDF4 import num2date
    time_units = dataset.variables['time'].units
    time_calendar = dataset.variables['time'].calendar if hasattr(dataset.variables['time'], 'calendar') else 'standard'
    dates = num2date(times, units=time_units, calendar=time_calendar)
    
    # Step 3: Find the indices for the area of interest
    lon_idx = np.where((lons >= lon_min) & (lons <= lon_max))
    lat_idx = np.where((lats >= lat_min) & (lats <= lat_max))
    
    # Extract the precipitation data
    precip_data = dataset.variables[variable_name][:, lat_idx[0], lon_idx[0]]
    
    # Step 4: Loop through the years and create a plot for each year
    years = np.array([date.year for date in dates])
    unique_years = np.unique(years)
    
    # Create a figure with subplots
    fig, axes = plt.subplots(rows, cols, figsize=(20, 15), subplot_kw={'projection': ccrs.PlateCarree()})
    
    # Flatten the axes array for easy iteration
    axes = axes.flatten()
    
    for i, year in enumerate(unique_years[:rows*cols]):  # Limit the number of years to fit in the grid
        print(f'Plotting data for {year}')
        # Get the data for the specific year
        year_idx = np.where(years == year)
        year_data = np.mean(precip_data[year_idx], axis=0)  # Average over the year

        # Select the appropriate subplot
        ax = axes[i]
        ax.set_extent([lon_min, lon_max, lat_min, lat_max], crs=ccrs.PlateCarree())

        # Add geographic features
        ax.add_feature(cfeature.BORDERS, linewidth=1.0, edgecolor='black')
        ax.add_feature(cfeature.COASTLINE)
        ax.add_feature(cfeature.LAND, edgecolor='black')
        ax.add_feature(cfeature.OCEAN)
        ax.add_feature(cfeature.LAKES, edgecolor='black')
        ax.add_feature(cfeature.RIVERS)
        
        # Plot the precipitation data
        lon_grid, lat_grid = np.meshgrid(lons[lon_idx], lats[lat_idx])
        cs = ax.contourf(lon_grid, lat_grid, year_data, transform=ccrs.PlateCarree(), cmap='Blues')

        # Add title for each subplot
        ax.set_title(f'{year}', fontsize=10)
    
    # Add a colorbar to the figure
    fig.colorbar(cs, ax=axes, orientation='vertical', fraction=0.02, pad=0.02, label=f'{variable_name} (mm/day)')
    
    # Set the main title
    plt.suptitle(f'Yearly Precipitation Maps', fontsize=20)
    
    # Show the figure
    plt.tight_layout()
    plt.show()
    
    # Step 5: Close the dataset
    dataset.close()

# Step 6: Main script
if __name__ == "__main__":
    # Define the path to your NetCDF file and variable name
    netcdf_file = 'C:/Users/s.iqbal/Desktop/Wife_Khalid Bhai/pr_day_MPI-ESM1-2-HR_ssp585_r1i1p1f1_gn_19810101-21001231_0.25d_BCorr_final-NoLeap-seldat-71-2100.nc'
    variable_name = 'pr'       # <-- Replace this with the variable name in your NetCDF file (e.g., 'precipitation')

    # Define the area of interest (Pakistan)
    lon_min, lon_max = 60.0, 80.0         # Longitude bounds for Pakistan
    lat_min, lat_max = 20.0, 40.0         # Latitude bounds for Pakistan

    # Call the function to plot yearly precipitation data in a grid layout
    plot_yearly_precipitation_grid(netcdf_file, variable_name, lon_min, lon_max, lat_min, lat_max, rows=3, cols=4)
